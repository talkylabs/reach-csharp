/*
 * This code was generated by
 *  ___ ___   _   ___ _  _    _____ _   _    _  ___   ___      _   ___ ___      ___   _   ___     ___ ___ _  _ ___ ___    _ _____ ___  ___ 
 * | _ \ __| /_\ / __| || |__|_   _/_\ | |  | |/ | \ / / |    /_\ | _ ) __|___ / _ \ /_\ |_ _|__ / __| __| \| | __| _ \  /_\_   _/ _ \| _ \
 * |   / _| / _ \ (__| __ |___|| |/ _ \| |__| ' < \ V /| |__ / _ \| _ \__ \___| (_) / _ \ | |___| (_ | _|| .` | _||   / / _ \| || (_) |   /
 * |_|_\___/_/ \_\___|_||_|    |_/_/ \_\____|_|\_\ |_| |____/_/ \_\___/___/    \___/_/ \_\___|   \___|___|_|\_|___|_|_\/_/ \_\_| \___/|_|_\
 *                                                                                                                                         
 * Reach Authentix API
 *  Reach Authentix API helps you easily integrate user authentification in your application. The authentification allows to verify that a user is indeed at the origin of a request from your application.  At the moment, the Reach Authentix API supports the following channels:    * SMS      * Email   We are continuously working to add additionnal channels. ## Base URL All endpoints described in this documentation are relative to the following base URL: ``` https://api.reach.talkylabs.com/rest/authentix/v1/ ```  The API is provided over HTTPS protocol to ensure data privacy.  ## API Authentication Requests made to the API must be authenticated. You need to provide the `ApiUser` and `ApiKey` associated with your applet. This information could be found in the settings of the applet. ```curl curl -X GET [BASE_URL]/configurations -H \"ApiUser:[Your_Api_User]\" -H \"ApiKey:[Your_Api_Key]\" ``` ## Reach Authentix API Workflow Three steps are needed in order to authenticate a given user using the Reach Authentix API. ### Step 1: Create an Authentix configuration A configuration is a set of settings used to define and send an authentication code to a user. This includes, for example: ```   - the length of the authentication code,    - the message template,    - and so on... ``` A configuaration could be created via the web application or directly using the Reach Authentix API. This step does not need to be performed every time one wants to use the Reach Authentix API. Indeed, once created, a configuartion could be used to authenticate several users in the future.    ### Step 2: Send an authentication code A configuration is used to send an authentication code via a selected channel to a user. For now, the supported channels are `sms`, and `email`. We are working hard to support additional channels. Newly created authentications will have a status of `awaiting`. ### Step 3: Verify the authentication code This step allows to verify that the code submitted by the user matched the one sent previously. If, there is a match, then the status of the authentication changes from `awaiting` to `passed`. Otherwise, the status remains `awaiting` until either it is verified or it expires. In the latter case, the status becomes `expired`. 
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


using System;
using System.Collections.Generic;
using Reach.Base;
using Reach.Converters;




namespace Reach.Rest.Api.Authentix.ConfigurationItem
{
    /// <summary> This operation allows to fetch the API record associated to an authentication.    </summary>
    public class FetchAuthenticationItemOptions : IOptions<AuthenticationItemResource>
    {
    
        ///<summary> The identifier of the configuration being used. </summary> 
        public string PathConfigurationId { get; }

        ///<summary> The identifier of the authentication to be fetched. </summary> 
        public string PathAuthenticationId { get; }



        /// <summary> Construct a new FetchAuthenticationOptions </summary>
        /// <param name="pathConfigurationId"> The identifier of the configuration being used. </param>
        /// <param name="pathAuthenticationId"> The identifier of the authentication to be fetched. </param>
        public FetchAuthenticationItemOptions(string pathConfigurationId, string pathAuthenticationId)
        {
            PathConfigurationId = pathConfigurationId;
            PathAuthenticationId = pathAuthenticationId;
        }

        
        /// <summary> Generate the necessary parameters </summary>
        public  List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();

            return p;
        }
        

    }


    /// <summary> This operation allows to retrieve all authentications generated from a given configuration that are not expired and for which the number of maximum trials/controls is not exceeded.  When getting the authentication list, results will be sorted based  on the `dateCreated` field with the most recent record appearing first.  </summary>
    public class ReadAuthenticationItemOptions : ReadOptions<AuthenticationItemResource>
    {
    
        ///<summary> The identifier of the configuration being used. </summary> 
        public string PathConfigurationId { get; }



        /// <summary> Construct a new ListAuthenticationsOptions </summary>
        /// <param name="pathConfigurationId"> The identifier of the configuration being used. </param>
        public ReadAuthenticationItemOptions(string pathConfigurationId)
        {
            PathConfigurationId = pathConfigurationId;
        }

        
        /// <summary> Generate the necessary parameters </summary>
        public  override List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();

            if (PageSize != null)
            {
                p.Add(new KeyValuePair<string, string>("pageSize", PageSize.ToString()));
            }
            return p;
        }
        

    }


    /// <summary> This operation allows to start a new authentication process by sending a code via a specific channel.  </summary>
    public class StartAuthenticationItemOptions : IOptions<AuthenticationItemResource>
    {
        
        ///<summary> The identifier of the configuration being used. </summary> 
        public string PathConfigurationId { get; }

        ///<summary> The phone number or email where to send the authentication code. Phone numbers must be in E.164 format. </summary> 
        public string Dest { get; }

        ///<summary> The channel by which the authentication code is sent. </summary> 
        public AuthenticationItemResource.ChannelEnum Channel { get; }

        ///<summary> a service name overwriting the one defined in the configuration. </summary> 
        public string ServiceName { get; set; }

        ///<summary> the pre-generated code to be sent. Its length should be between 4 and 10 inclusive. </summary> 
        public string CustomCode { get; set; }

        ///<summary> Information related to the digital payment to authenticate. It is required when `usedForDigitalPayment` is true. It is ignored otherwise. It is a stringfied JSON map where keys are `payee`, `amount`, and `currency` and the associated values are respectively the payee, the amount, and the currency of a financial transaction.  </summary> 
        public string PaymentInfo { get; set; }

        ///<summary> This is the ID of the message template to use for sending the authenetication code. It could be an sms or email template depending on the channel being used. It overwirites the template ID defined in the configuration if any.  </summary> 
        public string TemplateId { get; set; }

        ///<summary> A stringfied JSON map where keys are message template parameters and the values are the parameter values to be used when sending the authentication code. It may also be used to provide additional parameters for sending email based authentications such as the email used for sending the code. </summary> 
        public string TemplateDataMap { get; set; }


        /// <summary> Construct a new StartAuthenticationOptions </summary>
        /// <param name="pathConfigurationId"> The identifier of the configuration being used. </param>
        /// <param name="dest"> The phone number or email where to send the authentication code. Phone numbers must be in E.164 format. </param>
        /// <param name="channel"> The channel by which the authentication code is sent. </param>
        public StartAuthenticationItemOptions(string pathConfigurationId, string dest, AuthenticationItemResource.ChannelEnum channel)
        {
            PathConfigurationId = pathConfigurationId;
            Dest = dest;
            Channel = channel;
        }

        
        /// <summary> Generate the necessary parameters </summary>
        public  List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();

            if (Dest != null)
            {
                p.Add(new KeyValuePair<string, string>("dest", Dest));
            }
            if (Channel != null)
            {
                p.Add(new KeyValuePair<string, string>("channel", Channel.ToString()));
            }
            if (ServiceName != null)
            {
                p.Add(new KeyValuePair<string, string>("serviceName", ServiceName));
            }
            if (CustomCode != null)
            {
                p.Add(new KeyValuePair<string, string>("customCode", CustomCode));
            }
            if (PaymentInfo != null)
            {
                p.Add(new KeyValuePair<string, string>("paymentInfo", PaymentInfo));
            }
            if (TemplateId != null)
            {
                p.Add(new KeyValuePair<string, string>("templateId", TemplateId));
            }
            if (TemplateDataMap != null)
            {
                p.Add(new KeyValuePair<string, string>("templateDataMap", TemplateDataMap));
            }
            return p;
        }
        

    }
    /// <summary> This operation allows to manually update the status of an authentication. This should only be used with custom code authentications.  Set the authentication status to \"passed\" after you validated the authentication code. Similarly, set the authentication status to \"canceled\" if you want to restart start a new authentication with a different code.  When not using custom codes, there is no need to used this method as the REACH Authentix API can manage the whole life cycle of an authentication.  </summary>
    public class UpdateAuthenticationItemOptions : IOptions<AuthenticationItemResource>
    {
    
        ///<summary> The identifier of the configuration being used. </summary> 
        public string PathConfigurationId { get; }

        ///<summary> The identifier of the authentication to be updated. </summary> 
        public string PathAuthenticationId { get; }

        ///<summary> The new status of the authentication. </summary> 
        public AuthenticationItemResource.StatusEnum Status { get; }



        /// <summary> Construct a new UpdateAuthenticationStatusOptions </summary>
        /// <param name="pathConfigurationId"> The identifier of the configuration being used. </param>
        /// <param name="pathAuthenticationId"> The identifier of the authentication to be updated. </param>
        /// <param name="status"> The new status of the authentication. </param>
        public UpdateAuthenticationItemOptions(string pathConfigurationId, string pathAuthenticationId, AuthenticationItemResource.StatusEnum status)
        {
            PathConfigurationId = pathConfigurationId;
            PathAuthenticationId = pathAuthenticationId;
            Status = status;
        }

        
        /// <summary> Generate the necessary parameters </summary>
        public  List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();

            if (Status != null)
            {
                p.Add(new KeyValuePair<string, string>("status", Status.ToString()));
            }
            return p;
        }
        

    }


}

