/*
 * This code was generated by
 *  ___ ___   _   ___ _  _    _____ _   _    _  ___   ___      _   ___ ___      ___   _   ___     ___ ___ _  _ ___ ___    _ _____ ___  ___ 
 * | _ \ __| /_\ / __| || |__|_   _/_\ | |  | |/ | \ / / |    /_\ | _ ) __|___ / _ \ /_\ |_ _|__ / __| __| \| | __| _ \  /_\_   _/ _ \| _ \
 * |   / _| / _ \ (__| __ |___|| |/ _ \| |__| ' < \ V /| |__ / _ \| _ \__ \___| (_) / _ \ | |___| (_ | _|| .` | _||   / / _ \| || (_) |   /
 * |_|_\___/_/ \_\___|_||_|    |_/_/ \_\____|_|\_\ |_| |____/_/ \_\___/___/    \___/_/ \_\___|   \___|___|_|\_|___|_|_\/_/ \_\_| \___/|_|_\
 *                                                                                                                                         
 * Reach Authentix API
 *  Reach Authentix API helps you easily integrate user authentification in your application. The authentification allows to verify that a user is indeed at the origin of a request from your application.  At the moment, the Reach Authentix API supports the following channels:    * SMS      * Email   We are continuously working to add additionnal channels. ## Base URL All endpoints described in this documentation are relative to the following base URL: ``` https://api.reach.talkylabs.com/rest/authentix/v1/ ```  The API is provided over HTTPS protocol to ensure data privacy.  ## API Authentication Requests made to the API must be authenticated. You need to provide the `ApiUser` and `ApiKey` associated with your applet. This information could be found in the settings of the applet. ```curl curl -X GET [BASE_URL]/configurations -H \"ApiUser:[Your_Api_User]\" -H \"ApiKey:[Your_Api_Key]\" ``` ## Reach Authentix API Workflow Three steps are needed in order to authenticate a given user using the Reach Authentix API. ### Step 1: Create an Authentix configuration A configuration is a set of settings used to define and send an authentication code to a user. This includes, for example: ```   - the length of the authentication code,    - the message template,    - and so on... ``` A configuaration could be created via the web application or directly using the Reach Authentix API. This step does not need to be performed every time one wants to use the Reach Authentix API. Indeed, once created, a configuartion could be used to authenticate several users in the future.    ### Step 2: Send an authentication code A configuration is used to send an authentication code via a selected channel to a user. For now, the supported channels are `sms`, and `email`. We are working hard to support additional channels. Newly created authentications will have a status of `awaiting`. ### Step 3: Verify the authentication code This step allows to verify that the code submitted by the user matched the one sent previously. If, there is a match, then the status of the authentication changes from `awaiting` to `passed`. Otherwise, the status remains `awaiting` until either it is verified or it expires. In the latter case, the status becomes `expired`. 
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using Reach.Base;
using Reach.Clients;
using Reach.Converters;
using Reach.Exceptions;
using Reach.Http;



namespace Reach.Rest.Api.Authentix
{
    public class ConfigurationItemResource : Resource
    {
    

        
        private static Request BuildCreateRequest(CreateConfigurationItemOptions options, IReachRestClient client)
        {
            
            string path = "/rest/authentix/v1/configurations";


            return new Request(
                HttpMethod.Post,
                Rest.Domain.Api,
                path,
                postParams: options.GetParams(),
                headerParams: null
            );
        }

        /// <summary> This operation allows to create a Reach Authentix configuration.  </summary>
        /// <param name="options"> Create ConfigurationItem parameters </param>
        /// <param name="client"> Client to make requests to Reach(TalkyLabs) </param>
        /// <returns> A single instance of ConfigurationItem </returns>
        public static ConfigurationItemResource Create(CreateConfigurationItemOptions options, IReachRestClient client = null)
        {
            client = client ?? ReachClient.GetRestClient();
            var response = client.Request(BuildCreateRequest(options, client));
            return FromJson(response.Content);
        }

        #if !NET35
        /// <summary> This operation allows to create a Reach Authentix configuration.  </summary>
        /// <param name="options"> Create ConfigurationItem parameters </param>
        /// <param name="client"> Client to make requests to Reach(TalkyLabs) </param>
        /// <returns> Task that resolves to A single instance of ConfigurationItem </returns>
        public static async System.Threading.Tasks.Task<ConfigurationItemResource> CreateAsync(CreateConfigurationItemOptions options,
        IReachRestClient client = null)
        {
            client = client ?? ReachClient.GetRestClient();
            var response = await client.RequestAsync(BuildCreateRequest(options, client));
            return FromJson(response.Content);
        }
        #endif

        /// <summary> This operation allows to create a Reach Authentix configuration.  </summary>
        /// <param name="serviceName"> The name of the authentication service attached to this configuration. It can be up to 40 characters long. </param>
        /// <param name="codeLength"> The length of the code to be generated. It must be a value between 4 and 10, inclusive. If not specified, the default value is 5. </param>
        /// <param name="allowCustomCode"> A flag indicating if the configuration should allow sending custom and non-generated code. </param>
        /// <param name="usedForDigitalPayment"> A flag indicating if the configuration is used to authenticate digital payments. In such a case, additional information such as the amount and the payee of the financial transaction should be sent to when starting the authentication. </param>
        /// <param name="defaultExpiryTime"> It represents how long, in minutes, an authentication process will remained in the `awaiting` status before moving to `expired` in the case no valid matching is performed in between.   It also means that the code sent for the autentication remains the same during its validity period until the autentication is successful. In other words, if another authentication request is asked within that period, the same code will be sent.  If not specified, the default value is 15 minutes. It must be any value between 1 and 1440 which represents 24 hours.  </param>
        /// <param name="defaultMaxTrials"> It represents the maximum number of trials per authentication. The default value is 5.  </param>
        /// <param name="defaultMaxControls"> It represents the maximum number of code controls per authentication. It must be between 1 and 6 inclusive. The default value is 3.  </param>
        /// <param name="smtpSettingId"> This is the ID of the SMTP settings used by this configuration. It is mandatory to provide this parameter in order to send the authentication code via email. An SMTPSetting can be created via the web application in an easy way. </param>
        /// <param name="emailTemplateId"> This is the ID of the default email template to use for sending authenetication codes via email. If not provided, the message used will be:   ```    ${SERVICE_NAME}: your authentication code is ${CODE}.  ```    </param>
        /// <param name="smsTemplateId"> This is the ID of the default sms template to use for sending authenetication codes via sms. If not provided, the message used will be:   ```    ${SERVICE_NAME}: your authentication code is ${CODE}.  ```  </param>
        /// <param name="client"> Client to make requests to Reach(TalkyLabs) </param>
        /// <returns> A single instance of ConfigurationItem </returns>
        public static ConfigurationItemResource Create(
                                          string serviceName,
                                          int? codeLength = null,
                                          bool? allowCustomCode = null,
                                          bool? usedForDigitalPayment = null,
                                          int? defaultExpiryTime = null,
                                          int? defaultMaxTrials = null,
                                          int? defaultMaxControls = null,
                                          string smtpSettingId = null,
                                          string emailTemplateId = null,
                                          string smsTemplateId = null,
                                          IReachRestClient client = null)
        {
            var options = new CreateConfigurationItemOptions(serviceName){  CodeLength = codeLength, AllowCustomCode = allowCustomCode, UsedForDigitalPayment = usedForDigitalPayment, DefaultExpiryTime = defaultExpiryTime, DefaultMaxTrials = defaultMaxTrials, DefaultMaxControls = defaultMaxControls, SmtpSettingId = smtpSettingId, EmailTemplateId = emailTemplateId, SmsTemplateId = smsTemplateId };
            return Create(options, client);
        }

        #if !NET35
        /// <summary> This operation allows to create a Reach Authentix configuration.  </summary>
        /// <param name="serviceName"> The name of the authentication service attached to this configuration. It can be up to 40 characters long. </param>
        /// <param name="codeLength"> The length of the code to be generated. It must be a value between 4 and 10, inclusive. If not specified, the default value is 5. </param>
        /// <param name="allowCustomCode"> A flag indicating if the configuration should allow sending custom and non-generated code. </param>
        /// <param name="usedForDigitalPayment"> A flag indicating if the configuration is used to authenticate digital payments. In such a case, additional information such as the amount and the payee of the financial transaction should be sent to when starting the authentication. </param>
        /// <param name="defaultExpiryTime"> It represents how long, in minutes, an authentication process will remained in the `awaiting` status before moving to `expired` in the case no valid matching is performed in between.   It also means that the code sent for the autentication remains the same during its validity period until the autentication is successful. In other words, if another authentication request is asked within that period, the same code will be sent.  If not specified, the default value is 15 minutes. It must be any value between 1 and 1440 which represents 24 hours.  </param>
        /// <param name="defaultMaxTrials"> It represents the maximum number of trials per authentication. The default value is 5.  </param>
        /// <param name="defaultMaxControls"> It represents the maximum number of code controls per authentication. It must be between 1 and 6 inclusive. The default value is 3.  </param>
        /// <param name="smtpSettingId"> This is the ID of the SMTP settings used by this configuration. It is mandatory to provide this parameter in order to send the authentication code via email. An SMTPSetting can be created via the web application in an easy way. </param>
        /// <param name="emailTemplateId"> This is the ID of the default email template to use for sending authenetication codes via email. If not provided, the message used will be:   ```    ${SERVICE_NAME}: your authentication code is ${CODE}.  ```    </param>
        /// <param name="smsTemplateId"> This is the ID of the default sms template to use for sending authenetication codes via sms. If not provided, the message used will be:   ```    ${SERVICE_NAME}: your authentication code is ${CODE}.  ```  </param>
        /// <param name="client"> Client to make requests to Reach(TalkyLabs) </param>
        /// <returns> Task that resolves to A single instance of ConfigurationItem </returns>
        public static async System.Threading.Tasks.Task<ConfigurationItemResource> CreateAsync(
                                                                                  string serviceName,
                                                                                  int? codeLength = null,
                                                                                  bool? allowCustomCode = null,
                                                                                  bool? usedForDigitalPayment = null,
                                                                                  int? defaultExpiryTime = null,
                                                                                  int? defaultMaxTrials = null,
                                                                                  int? defaultMaxControls = null,
                                                                                  string smtpSettingId = null,
                                                                                  string emailTemplateId = null,
                                                                                  string smsTemplateId = null,
                                                                                  IReachRestClient client = null)
        {
        var options = new CreateConfigurationItemOptions(serviceName){  CodeLength = codeLength, AllowCustomCode = allowCustomCode, UsedForDigitalPayment = usedForDigitalPayment, DefaultExpiryTime = defaultExpiryTime, DefaultMaxTrials = defaultMaxTrials, DefaultMaxControls = defaultMaxControls, SmtpSettingId = smtpSettingId, EmailTemplateId = emailTemplateId, SmsTemplateId = smsTemplateId };
            return await CreateAsync(options, client);
        }
        #endif
        
        /// <summary> This operation allows to delete a configuration from the applet account. Once the record is deleted, it will no longer appear in the API and the applet portal.    </summary>
        /// <param name="options"> Delete ConfigurationItem parameters </param>
        /// <param name="client"> Client to make requests to Reach(TalkyLabs) </param>
        /// <returns> A single instance of ConfigurationItem </returns>
        private static Request BuildDeleteRequest(DeleteConfigurationItemOptions options, IReachRestClient client)
        {
            
            string path = "/rest/authentix/v1/configurations/{configurationId}";

            string PathConfigurationId = options.PathConfigurationId;
            path = path.Replace("{"+"configurationId"+"}", PathConfigurationId);

            return new Request(
                HttpMethod.Delete,
                Rest.Domain.Api,
                path,
                queryParams: options.GetParams(),
                headerParams: null
            );
        }

        /// <summary> This operation allows to delete a configuration from the applet account. Once the record is deleted, it will no longer appear in the API and the applet portal.    </summary>
        /// <param name="options"> Delete ConfigurationItem parameters </param>
        /// <param name="client"> Client to make requests to Reach(TalkyLabs) </param>
        /// <returns> A single instance of ConfigurationItem </returns>
        public static bool Delete(DeleteConfigurationItemOptions options, IReachRestClient client = null)
        {
            client = client ?? ReachClient.GetRestClient();
            var response = client.Request(BuildDeleteRequest(options, client));
            return response.StatusCode == System.Net.HttpStatusCode.NoContent;
        }

        #if !NET35
        /// <summary> This operation allows to delete a configuration from the applet account. Once the record is deleted, it will no longer appear in the API and the applet portal.    </summary>
        /// <param name="options"> Delete ConfigurationItem parameters </param>
        /// <param name="client"> Client to make requests to Reach(TalkyLabs) </param>
        /// <returns> Task that resolves to A single instance of ConfigurationItem </returns>
        public static async System.Threading.Tasks.Task<bool> DeleteAsync(DeleteConfigurationItemOptions options,
                                                                          IReachRestClient client = null)
        {
            client = client ?? ReachClient.GetRestClient();
            var response = await client.RequestAsync(BuildDeleteRequest(options, client));
            return response.StatusCode == System.Net.HttpStatusCode.NoContent;
        }
        #endif

        /// <summary> This operation allows to delete a configuration from the applet account. Once the record is deleted, it will no longer appear in the API and the applet portal.    </summary>
        /// <param name="pathConfigurationId"> The identifier of the configuration to be deleted. </param>
        /// <param name="client"> Client to make requests to Reach(TalkyLabs) </param>
        /// <returns> A single instance of ConfigurationItem </returns>
        public static bool Delete(string pathConfigurationId, IReachRestClient client = null)
        {
            var options = new DeleteConfigurationItemOptions(pathConfigurationId)     ;
            return Delete(options, client);
        }

        #if !NET35
        /// <summary> This operation allows to delete a configuration from the applet account. Once the record is deleted, it will no longer appear in the API and the applet portal.    </summary>
        /// <param name="pathConfigurationId"> The identifier of the configuration to be deleted. </param>
        /// <param name="client"> Client to make requests to Reach(TalkyLabs) </param>
        /// <returns> Task that resolves to A single instance of ConfigurationItem </returns>
        public static async System.Threading.Tasks.Task<bool> DeleteAsync(string pathConfigurationId, IReachRestClient client = null)
        {
            var options = new DeleteConfigurationItemOptions(pathConfigurationId) ;
            return await DeleteAsync(options, client);
        }
        #endif
        
        private static Request BuildFetchRequest(FetchConfigurationItemOptions options, IReachRestClient client)
        {
            
            string path = "/rest/authentix/v1/configurations/{configurationId}";

            string PathConfigurationId = options.PathConfigurationId;
            path = path.Replace("{"+"configurationId"+"}", PathConfigurationId);

            return new Request(
                HttpMethod.Get,
                Rest.Domain.Api,
                path,
                queryParams: options.GetParams(),
                headerParams: null
            );
        }

        /// <summary> This operation allows to fetch the API record associated with a configuration.  This operation needs the `configurationId` of the configuration to be fetched.    </summary>
        /// <param name="options"> Fetch ConfigurationItem parameters </param>
        /// <param name="client"> Client to make requests to Reach(TalkyLabs) </param>
        /// <returns> A single instance of ConfigurationItem </returns>
        public static ConfigurationItemResource Fetch(FetchConfigurationItemOptions options, IReachRestClient client = null)
        {
            client = client ?? ReachClient.GetRestClient();
            var response = client.Request(BuildFetchRequest(options, client));
            return FromJson(response.Content);
        }

        #if !NET35
        /// <summary> This operation allows to fetch the API record associated with a configuration.  This operation needs the `configurationId` of the configuration to be fetched.    </summary>
        /// <param name="options"> Fetch ConfigurationItem parameters </param>
        /// <param name="client"> Client to make requests to Reach(TalkyLabs) </param>
        /// <returns> Task that resolves to A single instance of ConfigurationItem </returns>
        public static async System.Threading.Tasks.Task<ConfigurationItemResource> FetchAsync(FetchConfigurationItemOptions options,
                                                                                             IReachRestClient client = null)
        {
            client = client ?? ReachClient.GetRestClient();
            var response = await client.RequestAsync(BuildFetchRequest(options, client));
            return FromJson(response.Content);
        }
        #endif
        /// <summary> This operation allows to fetch the API record associated with a configuration.  This operation needs the `configurationId` of the configuration to be fetched.    </summary>
        /// <param name="pathConfigurationId"> The identifier of the configuration to be fetched. </param>
        /// <param name="client"> Client to make requests to Reach(TalkyLabs) </param>
        /// <returns> A single instance of ConfigurationItem </returns>
        public static ConfigurationItemResource Fetch(
                                         string pathConfigurationId, 
                                         IReachRestClient client = null)
        {
            var options = new FetchConfigurationItemOptions(pathConfigurationId){  };
            return Fetch(options, client);
        }

        #if !NET35
        /// <summary> This operation allows to fetch the API record associated with a configuration.  This operation needs the `configurationId` of the configuration to be fetched.    </summary>
        /// <param name="pathConfigurationId"> The identifier of the configuration to be fetched. </param>
        /// <param name="client"> Client to make requests to Reach(TalkyLabs) </param>
        /// <returns> Task that resolves to A single instance of ConfigurationItem </returns>
        public static async System.Threading.Tasks.Task<ConfigurationItemResource> FetchAsync(string pathConfigurationId, IReachRestClient client = null)
        {
            var options = new FetchConfigurationItemOptions(pathConfigurationId){  };
            return await FetchAsync(options, client);
        }
        #endif
        
        private static Request BuildReadRequest(ReadConfigurationItemOptions options, IReachRestClient client)
        {
            
            string path = "/rest/authentix/v1/configurations";


            return new Request(
                HttpMethod.Get,
                Rest.Domain.Api,
                path,
                queryParams: options.GetParams(),
                headerParams: null
            );
        }
        /// <summary> This operation allows to retrieve all configurations defined in your applet.  When getting the configuration record list, results will be sorted based on the `dateCreated` field with the most recent record appearing first.  </summary>
        /// <param name="options"> Read ConfigurationItem parameters </param>
        /// <param name="client"> Client to make requests to Reach(TalkyLabs) </param>
        /// <returns> A single instance of ConfigurationItem </returns>
        public static ResourceSet<ConfigurationItemResource> Read(ReadConfigurationItemOptions options, IReachRestClient client = null)
        {
            client = client ?? ReachClient.GetRestClient();
            var request = BuildReadRequest(options, client);
            var url = request.GetUrlStringWithoutPaginationInfo();
            var response = client.Request(request);
            var page = Page<ConfigurationItemResource>.FromJson(url, "configurations", response.Content);
            return new ResourceSet<ConfigurationItemResource>(page, options, client);
        }

        #if !NET35
        /// <summary> This operation allows to retrieve all configurations defined in your applet.  When getting the configuration record list, results will be sorted based on the `dateCreated` field with the most recent record appearing first.  </summary>
        /// <param name="options"> Read ConfigurationItem parameters </param>
        /// <param name="client"> Client to make requests to Reach(TalkyLabs) </param>
        /// <returns> Task that resolves to A single instance of ConfigurationItem </returns>
        public static async System.Threading.Tasks.Task<ResourceSet<ConfigurationItemResource>> ReadAsync(ReadConfigurationItemOptions options,
                                                                                             IReachRestClient client = null)
        {
            client = client ?? ReachClient.GetRestClient();
            var request = BuildReadRequest(options, client);
            var url = request.GetUrlStringWithoutPaginationInfo();
            var response = await client.RequestAsync(request);

            var page = Page<ConfigurationItemResource>.FromJson(url, "configurations", response.Content);
            return new ResourceSet<ConfigurationItemResource>(page, options, client);
        }
        #endif
        /// <summary> This operation allows to retrieve all configurations defined in your applet.  When getting the configuration record list, results will be sorted based on the `dateCreated` field with the most recent record appearing first.  </summary>
        /// <param name="pageSize"> Maximum number of records to return per call. </param>
        /// <param name="limit"> Record limit </param>
        /// <param name="client"> Client to make requests to Reach(TalkyLabs) </param>
        /// <returns> A single instance of ConfigurationItem </returns>
        public static ResourceSet<ConfigurationItemResource> Read(
                                                     int? pageSize = null,
                                                     long? limit = null,
                                                     IReachRestClient client = null)
        {
            var options = new ReadConfigurationItemOptions(){ PageSize = pageSize, Limit = limit};
            return Read(options, client);
        }

        #if !NET35
        /// <summary> This operation allows to retrieve all configurations defined in your applet.  When getting the configuration record list, results will be sorted based on the `dateCreated` field with the most recent record appearing first.  </summary>
        /// <param name="pageSize"> Maximum number of records to return per call. </param>
        /// <param name="limit"> Record limit </param>
        /// <param name="client"> Client to make requests to Reach(TalkyLabs) </param>
        /// <returns> Task that resolves to A single instance of ConfigurationItem </returns>
        public static async System.Threading.Tasks.Task<ResourceSet<ConfigurationItemResource>> ReadAsync(
                                                                                             int? pageSize = null,
                                                                                             long? limit = null,
                                                                                             IReachRestClient client = null)
        {
            var options = new ReadConfigurationItemOptions(){ PageSize = pageSize, Limit = limit};
            return await ReadAsync(options, client);
        }
        #endif

        
        /// <summary> Fetch the target page of records </summary>
        /// <param name="targetUrl"> API-generated URL for the requested results page </param>
        /// <param name="client"> Client to make requests to Reach(TalkyLabs) </param>
        /// <returns> The target page of records </returns>
        public static Page<ConfigurationItemResource> GetPage(string targetUrl, IReachRestClient client)
        {
            client = client ?? ReachClient.GetRestClient();

            var request = new Request(
                HttpMethod.Get,
                targetUrl
            );

            var url = request.GetUrlStringWithoutPaginationInfo();
            var response = client.Request(request);
            return Page<ConfigurationItemResource>.FromJson(url, "configurations", response.Content);
        }

        /// <summary> Fetch the next page of records </summary>
        /// <param name="page"> current page of records </param>
        /// <param name="client"> Client to make requests to Reach(TalkyLabs) </param>
        /// <returns> The next page of records </returns>
        public static Page<ConfigurationItemResource> NextPage(Page<ConfigurationItemResource> page, IReachRestClient client)
        {
            var request = new Request(
                HttpMethod.Get,
                page.GetNextPageUrl(Rest.Domain.Api)
            );

            var url = request.GetUrlStringWithoutPaginationInfo();
            var response = client.Request(request);
            return Page<ConfigurationItemResource>.FromJson(url, "configurations", response.Content);
        }

        /// <summary> Fetch the previous page of records </summary>
        /// <param name="page"> current page of records </param>
        /// <param name="client"> Client to make requests to Reach(TalkyLabs) </param>
        /// <returns> The previous page of records </returns>
        public static Page<ConfigurationItemResource> PreviousPage(Page<ConfigurationItemResource> page, IReachRestClient client)
        {
            var request = new Request(
                HttpMethod.Get,
                page.GetPreviousPageUrl(Rest.Domain.Api)
            );

            var url = request.GetUrlStringWithoutPaginationInfo();
            var response = client.Request(request);
            return Page<ConfigurationItemResource>.FromJson(url, "configurations", response.Content);
        }

        
        private static Request BuildUpdateRequest(UpdateConfigurationItemOptions options, IReachRestClient client)
        {
            
            string path = "/rest/authentix/v1/configurations/{configurationId}";

            string PathConfigurationId = options.PathConfigurationId;
            path = path.Replace("{"+"configurationId"+"}", PathConfigurationId);

            return new Request(
                HttpMethod.Post,
                Rest.Domain.Api,
                path,
                postParams: options.GetParams(),
                headerParams: null
            );
        }

        /// <summary> This operation allows to update the attributes of a configuration.  </summary>
        /// <param name="options"> Update ConfigurationItem parameters </param>
        /// <param name="client"> Client to make requests to Reach(TalkyLabs) </param>
        /// <returns> A single instance of ConfigurationItem </returns>
        public static ConfigurationItemResource Update(UpdateConfigurationItemOptions options, IReachRestClient client = null)
        {
            client = client ?? ReachClient.GetRestClient();
            var response = client.Request(BuildUpdateRequest(options, client));
            return FromJson(response.Content);
        }

        /// <summary> This operation allows to update the attributes of a configuration.  </summary>
        /// <param name="options"> Update ConfigurationItem parameters </param>
        /// <param name="client"> Client to make requests to Reach(TalkyLabs) </param>
        /// <returns> Task that resolves to A single instance of ConfigurationItem </returns>
        #if !NET35
        public static async System.Threading.Tasks.Task<ConfigurationItemResource> UpdateAsync(UpdateConfigurationItemOptions options,
                                                                                                          IReachRestClient client = null)
        {
            client = client ?? ReachClient.GetRestClient();
            var response = await client.RequestAsync(BuildUpdateRequest(options, client));
            return FromJson(response.Content);
        }
        #endif

        /// <summary> This operation allows to update the attributes of a configuration.  </summary>
        /// <param name="pathConfigurationId"> The identifier of the configuration to be updated. </param>
        /// <param name="serviceName"> The name of the authentication service attached to this configuration. It can be up to 40 characters long. </param>
        /// <param name="codeLength"> The length of the code to be generated. It must be a value between 4 and 10, inclusive. </param>
        /// <param name="allowCustomCode"> A flag indicating if the configuration should allow sending custom and non-generated code. </param>
        /// <param name="usedForDigitalPayment"> A flag indicating if the configuration is used to authenticate digital payments. In such a case, additional information such as the amount and the payee of the financial transaction should be sent to when starting the authentication. </param>
        /// <param name="defaultExpiryTime"> It represents how long, in minutes, an authentication process will remained in the `awaiting` status before moving to `expired` in the case no valid matching is performed in between. It must be any value between 1 and 1440 which represents 24 hours. </param>
        /// <param name="defaultMaxTrials"> It represents the maximum number of trials per authentication.  </param>
        /// <param name="defaultMaxControls"> It represents the maximum number of code controls per authentication. It must be between 1 and 6 inclusive.  </param>
        /// <param name="smtpSettingId"> This is the ID of the SMTP settings used by this configuration. It is mandatory for sending authentication codes via email. </param>
        /// <param name="emailTemplateId"> This is the ID of the default email template to use for sending authenetication codes via email.  </param>
        /// <param name="smsTemplateId"> This is the ID of the default sms template to use for sending authenetication codes via sms.  </param>
        /// <param name="client"> Client to make requests to Reach(TalkyLabs) </param>
        /// <returns> A single instance of ConfigurationItem </returns>
        public static ConfigurationItemResource Update(
                                          string pathConfigurationId,
                                          string serviceName = null,
                                          int? codeLength = null,
                                          bool? allowCustomCode = null,
                                          bool? usedForDigitalPayment = null,
                                          int? defaultExpiryTime = null,
                                          int? defaultMaxTrials = null,
                                          int? defaultMaxControls = null,
                                          string smtpSettingId = null,
                                          string emailTemplateId = null,
                                          string smsTemplateId = null,
                                          IReachRestClient client = null)
        {
            var options = new UpdateConfigurationItemOptions(pathConfigurationId){ ServiceName = serviceName, CodeLength = codeLength, AllowCustomCode = allowCustomCode, UsedForDigitalPayment = usedForDigitalPayment, DefaultExpiryTime = defaultExpiryTime, DefaultMaxTrials = defaultMaxTrials, DefaultMaxControls = defaultMaxControls, SmtpSettingId = smtpSettingId, EmailTemplateId = emailTemplateId, SmsTemplateId = smsTemplateId };
            return Update(options, client);
        }

        #if !NET35
        /// <summary> This operation allows to update the attributes of a configuration.  </summary>
        /// <param name="pathConfigurationId"> The identifier of the configuration to be updated. </param>
        /// <param name="serviceName"> The name of the authentication service attached to this configuration. It can be up to 40 characters long. </param>
        /// <param name="codeLength"> The length of the code to be generated. It must be a value between 4 and 10, inclusive. </param>
        /// <param name="allowCustomCode"> A flag indicating if the configuration should allow sending custom and non-generated code. </param>
        /// <param name="usedForDigitalPayment"> A flag indicating if the configuration is used to authenticate digital payments. In such a case, additional information such as the amount and the payee of the financial transaction should be sent to when starting the authentication. </param>
        /// <param name="defaultExpiryTime"> It represents how long, in minutes, an authentication process will remained in the `awaiting` status before moving to `expired` in the case no valid matching is performed in between. It must be any value between 1 and 1440 which represents 24 hours. </param>
        /// <param name="defaultMaxTrials"> It represents the maximum number of trials per authentication.  </param>
        /// <param name="defaultMaxControls"> It represents the maximum number of code controls per authentication. It must be between 1 and 6 inclusive.  </param>
        /// <param name="smtpSettingId"> This is the ID of the SMTP settings used by this configuration. It is mandatory for sending authentication codes via email. </param>
        /// <param name="emailTemplateId"> This is the ID of the default email template to use for sending authenetication codes via email.  </param>
        /// <param name="smsTemplateId"> This is the ID of the default sms template to use for sending authenetication codes via sms.  </param>
        /// <param name="client"> Client to make requests to Reach(TalkyLabs) </param>
        /// <returns> Task that resolves to A single instance of ConfigurationItem </returns>
        public static async System.Threading.Tasks.Task<ConfigurationItemResource> UpdateAsync(
                                                                              string pathConfigurationId,
                                                                              string serviceName = null,
                                                                              int? codeLength = null,
                                                                              bool? allowCustomCode = null,
                                                                              bool? usedForDigitalPayment = null,
                                                                              int? defaultExpiryTime = null,
                                                                              int? defaultMaxTrials = null,
                                                                              int? defaultMaxControls = null,
                                                                              string smtpSettingId = null,
                                                                              string emailTemplateId = null,
                                                                              string smsTemplateId = null,
                                                                              IReachRestClient client = null)
        {
            var options = new UpdateConfigurationItemOptions(pathConfigurationId){ ServiceName = serviceName, CodeLength = codeLength, AllowCustomCode = allowCustomCode, UsedForDigitalPayment = usedForDigitalPayment, DefaultExpiryTime = defaultExpiryTime, DefaultMaxTrials = defaultMaxTrials, DefaultMaxControls = defaultMaxControls, SmtpSettingId = smtpSettingId, EmailTemplateId = emailTemplateId, SmsTemplateId = smsTemplateId };
            return await UpdateAsync(options, client);
        }
        #endif
    
        /// <summary>
        /// Converts a JSON string into a ConfigurationItemResource object
        /// </summary>
        /// <param name="json"> Raw JSON string </param>
        /// <returns> ConfigurationItemResource object represented by the provided JSON </returns>
        public static ConfigurationItemResource FromJson(string json)
        {
            try
            {
                return JsonConvert.DeserializeObject<ConfigurationItemResource>(json);
            }
            catch (JsonException e)
            {
                throw new ApiException(e.Message, e);
            }
        }
        
        /// <summary>
        /// Converts this instance to a JSON string.
        /// </summary>
        /// <returns> a Json string of this object </returns>
        public string ToJson()
        {
            try
            {
                return JsonConvert.SerializeObject(this, Formatting.Indented);
            }
            catch (JsonException e)
            {
                throw new ApiException(e.Message, e);
            }
        }
        
        /// <summary>
        /// Convert to string
        /// </summary>
        /// <returns>String representation</returns>
        public override string ToString()
        {
        	try
            {
                return ToJson();
            }
            catch (ApiException e)
            {
                return base.ToString();
            }
        
        }

    
        ///<summary> The identifier of the applet creating the configuration. </summary> 
        [JsonProperty("appletId")]
        public string AppletId { get; private set; }

        ///<summary> The API version used to create the configuration. </summary> 
        [JsonProperty("apiVersion")]
        public string ApiVersion { get; private set; }

        ///<summary> The identifier of the configuration. </summary> 
        [JsonProperty("configurationId")]
        public string ConfigurationId { get; private set; }

        ///<summary> The name of the authentication service. </summary> 
        [JsonProperty("serviceName")]
        public string ServiceName { get; private set; }

        ///<summary> The length of the code to be generated. </summary> 
        [JsonProperty("codeLength")]
        public int? CodeLength { get; private set; }

        ///<summary> A flag indicating if the configuration allows sending custom and non-generated code. </summary> 
        [JsonProperty("allowCustomCode")]
        public bool? AllowCustomCode { get; private set; }

        ///<summary> A flag indicating if the configuration is used to authenticate digital payments. </summary> 
        [JsonProperty("usedForDigitalPayment")]
        public bool? UsedForDigitalPayment { get; private set; }

        ///<summary> the default expiry time of the authentication code. </summary> 
        [JsonProperty("defaultExpiryTime")]
        public int? DefaultExpiryTime { get; private set; }

        ///<summary> the default maximum number of trials per authentication. </summary> 
        [JsonProperty("defaultMaxTrials")]
        public int? DefaultMaxTrials { get; private set; }

        ///<summary> the default maximum number of code controls per authentication. </summary> 
        [JsonProperty("defaultMaxControls")]
        public int? DefaultMaxControls { get; private set; }

        ///<summary> The ID of the SMTP settings used by the configuration. </summary> 
        [JsonProperty("smtpSettingId")]
        public string SmtpSettingId { get; private set; }

        ///<summary> The default email template ID used by this configuration.  </summary> 
        [JsonProperty("emailTemplateId")]
        public string EmailTemplateId { get; private set; }

        ///<summary> The default sms template ID used by this configuration.  </summary> 
        [JsonProperty("smsTemplateId")]
        public string SmsTemplateId { get; private set; }

        ///<summary> The date and time in GMT that the configuration was created.  </summary> 
        [JsonProperty("dateCreated")]
        public DateTime? DateCreated { get; private set; }

        ///<summary> The date and time in GMT that the configuration was last updated.  </summary> 
        [JsonProperty("dateUpdated")]
        public DateTime? DateUpdated { get; private set; }



        private ConfigurationItemResource() {

        }
    }
}

