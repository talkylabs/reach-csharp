/*
 * This code was generated by
 *  ___ ___   _   ___ _  _    _____ _   _    _  ___   ___      _   ___ ___      ___   _   ___     ___ ___ _  _ ___ ___    _ _____ ___  ___ 
 * | _ \ __| /_\ / __| || |__|_   _/_\ | |  | |/ | \ / / |    /_\ | _ ) __|___ / _ \ /_\ |_ _|__ / __| __| \| | __| _ \  /_\_   _/ _ \| _ \
 * |   / _| / _ \ (__| __ |___|| |/ _ \| |__| ' < \ V /| |__ / _ \| _ \__ \___| (_) / _ \ | |___| (_ | _|| .` | _||   / / _ \| || (_) |   /
 * |_|_\___/_/ \_\___|_||_|    |_/_/ \_\____|_|\_\ |_| |____/_/ \_\___/___/    \___/_/ \_\___|   \___|___|_|\_|___|_|_\/_/ \_\_| \___/|_|_\
 *                                                                                                                                         
 * Reach Authentix API
 *  Reach Authentix API helps you easily integrate user authentification in your application. The authentification allows to verify that a user is indeed at the origin of a request from your application.  At the moment, the Reach Authentix API supports the following channels:    * SMS      * Email   We are continuously working to add additionnal channels. ## Base URL All endpoints described in this documentation are relative to the following base URL: ``` https://api.reach.talkylabs.com/rest/authentix/v1/ ```  The API is provided over HTTPS protocol to ensure data privacy.  ## API Authentication Requests made to the API must be authenticated. You need to provide the `ApiUser` and `ApiKey` associated with your applet. This information could be found in the settings of the applet. ```curl curl -X GET [BASE_URL]/configurations -H \"ApiUser:[Your_Api_User]\" -H \"ApiKey:[Your_Api_Key]\" ``` ## Reach Authentix API Workflow Three steps are needed in order to authenticate a given user using the Reach Authentix API. ### Step 1: Create an Authentix configuration A configuration is a set of settings used to define and send an authentication code to a user. This includes, for example: ```   - the length of the authentication code,    - the message template,    - and so on... ``` A configuaration could be created via the web application or directly using the Reach Authentix API. This step does not need to be performed every time one wants to use the Reach Authentix API. Indeed, once created, a configuartion could be used to authenticate several users in the future.    ### Step 2: Send an authentication code A configuration is used to send an authentication code via a selected channel to a user. For now, the supported channels are `sms`, and `email`. We are working hard to support additional channels. Newly created authentications will have a status of `awaiting`. ### Step 3: Verify the authentication code This step allows to verify that the code submitted by the user matched the one sent previously. If, there is a match, then the status of the authentication changes from `awaiting` to `passed`. Otherwise, the status remains `awaiting` until either it is verified or it expires. In the latter case, the status becomes `expired`. 
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using Reach.Base;
using Reach.Clients;
using Reach.Converters;
using Reach.Exceptions;
using Reach.Http;
using Reach.Types;


namespace Reach.Rest.Api.Authentix
{
    public class AuthenticationTrialItemResource : Resource
    {
    
        public sealed class TrialStatusEnum : StringEnum
        {
            private TrialStatusEnum(string value) : base(value) {}
            public TrialStatusEnum() {}
            public static implicit operator TrialStatusEnum(string value)
            {
                return new TrialStatusEnum(value);
            }
            public static readonly TrialStatusEnum Successful = new TrialStatusEnum("successful");
            public static readonly TrialStatusEnum Unsuccessful = new TrialStatusEnum("unsuccessful");

        }
        public sealed class ChannelEnum : StringEnum
        {
            private ChannelEnum(string value) : base(value) {}
            public ChannelEnum() {}
            public static implicit operator ChannelEnum(string value)
            {
                return new ChannelEnum(value);
            }
            public static readonly ChannelEnum Sms = new ChannelEnum("sms");
            public static readonly ChannelEnum Email = new ChannelEnum("email");

        }

        
        private static Request BuildFetchRequest(FetchAuthenticationTrialItemOptions options, IReachRestClient client)
        {
            
            string path = "/rest/authentix/v1/authenticationTrials/{trialId}";

            string PathTrialId = options.PathTrialId;
            path = path.Replace("{"+"trialId"+"}", PathTrialId);

            return new Request(
                HttpMethod.Get,
                Rest.Domain.Api,
                path,
                queryParams: options.GetParams(),
                headerParams: null
            );
        }

        /// <summary> This operation allows to fetch the API record associated with an authentication trial.    </summary>
        /// <param name="options"> Fetch AuthenticationTrialItem parameters </param>
        /// <param name="client"> Client to make requests to Reach(TalkyLabs) </param>
        /// <returns> A single instance of AuthenticationTrialItem </returns>
        public static AuthenticationTrialItemResource Fetch(FetchAuthenticationTrialItemOptions options, IReachRestClient client = null)
        {
            client = client ?? ReachClient.GetRestClient();
            var response = client.Request(BuildFetchRequest(options, client));
            return FromJson(response.Content);
        }

        #if !NET35
        /// <summary> This operation allows to fetch the API record associated with an authentication trial.    </summary>
        /// <param name="options"> Fetch AuthenticationTrialItem parameters </param>
        /// <param name="client"> Client to make requests to Reach(TalkyLabs) </param>
        /// <returns> Task that resolves to A single instance of AuthenticationTrialItem </returns>
        public static async System.Threading.Tasks.Task<AuthenticationTrialItemResource> FetchAsync(FetchAuthenticationTrialItemOptions options,
                                                                                             IReachRestClient client = null)
        {
            client = client ?? ReachClient.GetRestClient();
            var response = await client.RequestAsync(BuildFetchRequest(options, client));
            return FromJson(response.Content);
        }
        #endif
        /// <summary> This operation allows to fetch the API record associated with an authentication trial.    </summary>
        /// <param name="pathTrialId"> The identifier of the authentication trial to be fetched. </param>
        /// <param name="client"> Client to make requests to Reach(TalkyLabs) </param>
        /// <returns> A single instance of AuthenticationTrialItem </returns>
        public static AuthenticationTrialItemResource Fetch(
                                         string pathTrialId, 
                                         IReachRestClient client = null)
        {
            var options = new FetchAuthenticationTrialItemOptions(pathTrialId){  };
            return Fetch(options, client);
        }

        #if !NET35
        /// <summary> This operation allows to fetch the API record associated with an authentication trial.    </summary>
        /// <param name="pathTrialId"> The identifier of the authentication trial to be fetched. </param>
        /// <param name="client"> Client to make requests to Reach(TalkyLabs) </param>
        /// <returns> Task that resolves to A single instance of AuthenticationTrialItem </returns>
        public static async System.Threading.Tasks.Task<AuthenticationTrialItemResource> FetchAsync(string pathTrialId, IReachRestClient client = null)
        {
            var options = new FetchAuthenticationTrialItemOptions(pathTrialId){  };
            return await FetchAsync(options, client);
        }
        #endif
        
        private static Request BuildReadRequest(ReadAuthenticationTrialItemOptions options, IReachRestClient client)
        {
            
            string path = "/rest/authentix/v1/authenticationTrials";


            return new Request(
                HttpMethod.Get,
                Rest.Domain.Api,
                path,
                queryParams: options.GetParams(),
                headerParams: null
            );
        }
        /// <summary> This operation allows to retrieve from the API authentication trial records that satisfied specified criteria.  When getting the record list, results will be sorted based on the `dateCreated` field with the most recent record appearing first.    </summary>
        /// <param name="options"> Read AuthenticationTrialItem parameters </param>
        /// <param name="client"> Client to make requests to Reach(TalkyLabs) </param>
        /// <returns> A single instance of AuthenticationTrialItem </returns>
        public static ResourceSet<AuthenticationTrialItemResource> Read(ReadAuthenticationTrialItemOptions options, IReachRestClient client = null)
        {
            client = client ?? ReachClient.GetRestClient();
            var request = BuildReadRequest(options, client);
            var url = request.GetUrlStringWithoutPaginationInfo();
            var response = client.Request(request);
            var page = Page<AuthenticationTrialItemResource>.FromJson(url, "authenticationTrials", response.Content);
            return new ResourceSet<AuthenticationTrialItemResource>(page, options, client);
        }

        #if !NET35
        /// <summary> This operation allows to retrieve from the API authentication trial records that satisfied specified criteria.  When getting the record list, results will be sorted based on the `dateCreated` field with the most recent record appearing first.    </summary>
        /// <param name="options"> Read AuthenticationTrialItem parameters </param>
        /// <param name="client"> Client to make requests to Reach(TalkyLabs) </param>
        /// <returns> Task that resolves to A single instance of AuthenticationTrialItem </returns>
        public static async System.Threading.Tasks.Task<ResourceSet<AuthenticationTrialItemResource>> ReadAsync(ReadAuthenticationTrialItemOptions options,
                                                                                             IReachRestClient client = null)
        {
            client = client ?? ReachClient.GetRestClient();
            var request = BuildReadRequest(options, client);
            var url = request.GetUrlStringWithoutPaginationInfo();
            var response = await client.RequestAsync(request);

            var page = Page<AuthenticationTrialItemResource>.FromJson(url, "authenticationTrials", response.Content);
            return new ResourceSet<AuthenticationTrialItemResource>(page, options, client);
        }
        #endif
        /// <summary> This operation allows to retrieve from the API authentication trial records that satisfied specified criteria.  When getting the record list, results will be sorted based on the `dateCreated` field with the most recent record appearing first.    </summary>
        /// <param name="dest"> Retrieve authentication trials sent only to this phone number or email. The phone number must be in the E.164 format. </param>
        /// <param name="trialStatus"> Retrieve authentication trials with the specified status. </param>
        /// <param name="channel"> Retrieve authentication trials sent via the specified channel. </param>
        /// <param name="configurationId"> Retrieve authentication trials from the configuration whose ID matches the specified one. </param>
        /// <param name="authenticationId"> Retrieve authentication trials from the authentication whose ID matches the specified one. </param>
        /// <param name="country"> Retrieve authentication trials sent to the specified destination country (in ISO 3166-1 alpha-2). Only possible when `dest` is a phone number. </param>
        /// <param name="sentAt"> Retrieve only authentication trials created at the specified date. Must be in ISO 8601 format. </param>
        /// <param name="sentAfter"> Retrieve only authentication trials created after the specified datetime. Must be in ISO 8601 format. </param>
        /// <param name="sentBefore"> Retrieve only authentication trials created before the specified datetime. Must be in ISO 8601 format. </param>
        /// <param name="pageSize"> Maximum number of records to return per call. </param>
        /// <param name="limit"> Record limit </param>
        /// <param name="client"> Client to make requests to Reach(TalkyLabs) </param>
        /// <returns> A single instance of AuthenticationTrialItem </returns>
        public static ResourceSet<AuthenticationTrialItemResource> Read(
                                                     string dest = null,
                                                     AuthenticationTrialItemResource.TrialStatusEnum trialStatus = null,
                                                     AuthenticationTrialItemResource.ChannelEnum channel = null,
                                                     string configurationId = null,
                                                     string authenticationId = null,
                                                     string country = null,
                                                     DateTime? sentAt = null,
                                                     DateTime? sentAfter = null,
                                                     DateTime? sentBefore = null,
                                                     int? pageSize = null,
                                                     long? limit = null,
                                                     IReachRestClient client = null)
        {
            var options = new ReadAuthenticationTrialItemOptions(){ Dest = dest, TrialStatus = trialStatus, Channel = channel, ConfigurationId = configurationId, AuthenticationId = authenticationId, Country = country, SentAt = sentAt, SentAfter = sentAfter, SentBefore = sentBefore, PageSize = pageSize, Limit = limit};
            return Read(options, client);
        }

        #if !NET35
        /// <summary> This operation allows to retrieve from the API authentication trial records that satisfied specified criteria.  When getting the record list, results will be sorted based on the `dateCreated` field with the most recent record appearing first.    </summary>
        /// <param name="dest"> Retrieve authentication trials sent only to this phone number or email. The phone number must be in the E.164 format. </param>
        /// <param name="trialStatus"> Retrieve authentication trials with the specified status. </param>
        /// <param name="channel"> Retrieve authentication trials sent via the specified channel. </param>
        /// <param name="configurationId"> Retrieve authentication trials from the configuration whose ID matches the specified one. </param>
        /// <param name="authenticationId"> Retrieve authentication trials from the authentication whose ID matches the specified one. </param>
        /// <param name="country"> Retrieve authentication trials sent to the specified destination country (in ISO 3166-1 alpha-2). Only possible when `dest` is a phone number. </param>
        /// <param name="sentAt"> Retrieve only authentication trials created at the specified date. Must be in ISO 8601 format. </param>
        /// <param name="sentAfter"> Retrieve only authentication trials created after the specified datetime. Must be in ISO 8601 format. </param>
        /// <param name="sentBefore"> Retrieve only authentication trials created before the specified datetime. Must be in ISO 8601 format. </param>
        /// <param name="pageSize"> Maximum number of records to return per call. </param>
        /// <param name="limit"> Record limit </param>
        /// <param name="client"> Client to make requests to Reach(TalkyLabs) </param>
        /// <returns> Task that resolves to A single instance of AuthenticationTrialItem </returns>
        public static async System.Threading.Tasks.Task<ResourceSet<AuthenticationTrialItemResource>> ReadAsync(
                                                                                             string dest = null,
                                                                                             AuthenticationTrialItemResource.TrialStatusEnum trialStatus = null,
                                                                                             AuthenticationTrialItemResource.ChannelEnum channel = null,
                                                                                             string configurationId = null,
                                                                                             string authenticationId = null,
                                                                                             string country = null,
                                                                                             DateTime? sentAt = null,
                                                                                             DateTime? sentAfter = null,
                                                                                             DateTime? sentBefore = null,
                                                                                             int? pageSize = null,
                                                                                             long? limit = null,
                                                                                             IReachRestClient client = null)
        {
            var options = new ReadAuthenticationTrialItemOptions(){ Dest = dest, TrialStatus = trialStatus, Channel = channel, ConfigurationId = configurationId, AuthenticationId = authenticationId, Country = country, SentAt = sentAt, SentAfter = sentAfter, SentBefore = sentBefore, PageSize = pageSize, Limit = limit};
            return await ReadAsync(options, client);
        }
        #endif

        
        /// <summary> Fetch the target page of records </summary>
        /// <param name="targetUrl"> API-generated URL for the requested results page </param>
        /// <param name="client"> Client to make requests to Reach(TalkyLabs) </param>
        /// <returns> The target page of records </returns>
        public static Page<AuthenticationTrialItemResource> GetPage(string targetUrl, IReachRestClient client)
        {
            client = client ?? ReachClient.GetRestClient();

            var request = new Request(
                HttpMethod.Get,
                targetUrl
            );

            var url = request.GetUrlStringWithoutPaginationInfo();
            var response = client.Request(request);
            return Page<AuthenticationTrialItemResource>.FromJson(url, "authenticationTrials", response.Content);
        }

        /// <summary> Fetch the next page of records </summary>
        /// <param name="page"> current page of records </param>
        /// <param name="client"> Client to make requests to Reach(TalkyLabs) </param>
        /// <returns> The next page of records </returns>
        public static Page<AuthenticationTrialItemResource> NextPage(Page<AuthenticationTrialItemResource> page, IReachRestClient client)
        {
            var request = new Request(
                HttpMethod.Get,
                page.GetNextPageUrl(Rest.Domain.Api)
            );

            var url = request.GetUrlStringWithoutPaginationInfo();
            var response = client.Request(request);
            return Page<AuthenticationTrialItemResource>.FromJson(url, "authenticationTrials", response.Content);
        }

        /// <summary> Fetch the previous page of records </summary>
        /// <param name="page"> current page of records </param>
        /// <param name="client"> Client to make requests to Reach(TalkyLabs) </param>
        /// <returns> The previous page of records </returns>
        public static Page<AuthenticationTrialItemResource> PreviousPage(Page<AuthenticationTrialItemResource> page, IReachRestClient client)
        {
            var request = new Request(
                HttpMethod.Get,
                page.GetPreviousPageUrl(Rest.Domain.Api)
            );

            var url = request.GetUrlStringWithoutPaginationInfo();
            var response = client.Request(request);
            return Page<AuthenticationTrialItemResource>.FromJson(url, "authenticationTrials", response.Content);
        }

    
        /// <summary>
        /// Converts a JSON string into a AuthenticationTrialItemResource object
        /// </summary>
        /// <param name="json"> Raw JSON string </param>
        /// <returns> AuthenticationTrialItemResource object represented by the provided JSON </returns>
        public static AuthenticationTrialItemResource FromJson(string json)
        {
            try
            {
                return JsonConvert.DeserializeObject<AuthenticationTrialItemResource>(json);
            }
            catch (JsonException e)
            {
                throw new ApiException(e.Message, e);
            }
        }
        
        /// <summary>
        /// Converts this instance to a JSON string.
        /// </summary>
        /// <returns> a Json string of this object </returns>
        public string ToJson()
        {
            try
            {
                return JsonConvert.SerializeObject(this, Formatting.Indented);
            }
            catch (JsonException e)
            {
                throw new ApiException(e.Message, e);
            }
        }
        
        /// <summary>
        /// Convert to string
        /// </summary>
        /// <returns>String representation</returns>
        public override string ToString()
        {
        	try
            {
                return ToJson();
            }
            catch (ApiException e)
            {
                return base.ToString();
            }
        
        }

    
        ///<summary> The identifier of the applet. </summary> 
        [JsonProperty("appletId")]
        public string AppletId { get; private set; }

        ///<summary> The API version. </summary> 
        [JsonProperty("apiVersion")]
        public string ApiVersion { get; private set; }

        ///<summary> The identifier of the configuration. </summary> 
        [JsonProperty("configurationId")]
        public string ConfigurationId { get; private set; }

        ///<summary> The identifier of the authentication. </summary> 
        [JsonProperty("authenticationId")]
        public string AuthenticationId { get; private set; }

        ///<summary> The identifier of the authentication trial. </summary> 
        [JsonProperty("trialId")]
        public string TrialId { get; private set; }

        ///<summary> The status of the authentication. </summary> 
        [JsonProperty("trialStatus")]
        public string TrialStatus { get; private set; }

        ///<summary> The channel used. </summary> 
        [JsonProperty("channel")]
        public string Channel { get; private set; }

        ///<summary> The paymentInfo </summary> 
        [JsonProperty("paymentInfo")]
        public PaymentInfo PaymentInfo { get; private set; }

        ///<summary> The date and time in GMT that the authentication trial was created.  </summary> 
        [JsonProperty("dateCreated")]
        public DateTime? DateCreated { get; private set; }

        ///<summary> The date and time in GMT that the authentication trial was last updated.  </summary> 
        [JsonProperty("dateUpdated")]
        public DateTime? DateUpdated { get; private set; }

        ///<summary> The cost billed for the authentication trial, in the currency specified by `priceUnit`. This cost does not include the cost for checking the correctness of the code. </summary> 
        [JsonProperty("price")]
        public decimal? Price { get; private set; }

        ///<summary> The currency, in ISO 4127 format, in which price is measured. for example, usd, xaf, eur, cad. </summary> 
        [JsonProperty("priceUnit")]
        public string PriceUnit { get; private set; }

        ///<summary> channel specific information related to a trial. </summary> 
        [JsonProperty("channelInfo")]
        public Dictionary<string, Object> ChannelInfo { get; private set; }



        private AuthenticationTrialItemResource() {

        }
    }
}

