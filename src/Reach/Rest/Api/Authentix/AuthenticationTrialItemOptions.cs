/*
 * This code was generated by
 *  ___ ___   _   ___ _  _    _____ _   _    _  ___   ___      _   ___ ___      ___   _   ___     ___ ___ _  _ ___ ___    _ _____ ___  ___ 
 * | _ \ __| /_\ / __| || |__|_   _/_\ | |  | |/ | \ / / |    /_\ | _ ) __|___ / _ \ /_\ |_ _|__ / __| __| \| | __| _ \  /_\_   _/ _ \| _ \
 * |   / _| / _ \ (__| __ |___|| |/ _ \| |__| ' < \ V /| |__ / _ \| _ \__ \___| (_) / _ \ | |___| (_ | _|| .` | _||   / / _ \| || (_) |   /
 * |_|_\___/_/ \_\___|_||_|    |_/_/ \_\____|_|\_\ |_| |____/_/ \_\___/___/    \___/_/ \_\___|   \___|___|_|\_|___|_|_\/_/ \_\_| \___/|_|_\
 *                                                                                                                                         
 * Reach Authentix API
 *  Reach Authentix API helps you easily integrate user authentification in your application. The authentification allows to verify that a user is indeed at the origin of a request from your application.  At the moment, the Reach Authentix API supports the following channels:    * SMS      * Email   We are continuously working to add additionnal channels. ## Base URL All endpoints described in this documentation are relative to the following base URL: ``` https://api.reach.talkylabs.com/rest/authentix/v1/ ```  The API is provided over HTTPS protocol to ensure data privacy.  ## API Authentication Requests made to the API must be authenticated. You need to provide the `ApiUser` and `ApiKey` associated with your applet. This information could be found in the settings of the applet. ```curl curl -X GET [BASE_URL]/configurations -H \"ApiUser:[Your_Api_User]\" -H \"ApiKey:[Your_Api_Key]\" ``` ## Reach Authentix API Workflow Three steps are needed in order to authenticate a given user using the Reach Authentix API. ### Step 1: Create an Authentix configuration A configuration is a set of settings used to define and send an authentication code to a user. This includes, for example: ```   - the length of the authentication code,    - the message template,    - and so on... ``` A configuaration could be created via the web application or directly using the Reach Authentix API. This step does not need to be performed every time one wants to use the Reach Authentix API. Indeed, once created, a configuartion could be used to authenticate several users in the future.    ### Step 2: Send an authentication code A configuration is used to send an authentication code via a selected channel to a user. For now, the supported channels are `sms`, and `email`. We are working hard to support additional channels. Newly created authentications will have a status of `awaiting`. ### Step 3: Verify the authentication code This step allows to verify that the code submitted by the user matched the one sent previously. If, there is a match, then the status of the authentication changes from `awaiting` to `passed`. Otherwise, the status remains `awaiting` until either it is verified or it expires. In the latter case, the status becomes `expired`. 
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


using System;
using System.Collections.Generic;
using Reach.Base;
using Reach.Converters;




namespace Reach.Rest.Api.Authentix
{
    /// <summary> This operation allows to fetch the API record associated with an authentication trial.    </summary>
    public class FetchAuthenticationTrialItemOptions : IOptions<AuthenticationTrialItemResource>
    {
    
        ///<summary> The identifier of the authentication trial to be fetched. </summary> 
        public string PathTrialId { get; }



        /// <summary> Construct a new FetchAthenticationTrialOptions </summary>
        /// <param name="pathTrialId"> The identifier of the authentication trial to be fetched. </param>
        public FetchAuthenticationTrialItemOptions(string pathTrialId)
        {
            PathTrialId = pathTrialId;
        }

        
        /// <summary> Generate the necessary parameters </summary>
        public  List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();

            return p;
        }
        

    }


    /// <summary> This operation allows to retrieve from the API authentication trial records that satisfied specified criteria.  When getting the record list, results will be sorted based on the `dateCreated` field with the most recent record appearing first.    </summary>
    public class ReadAuthenticationTrialItemOptions : ReadOptions<AuthenticationTrialItemResource>
    {
    
        ///<summary> Retrieve authentication trials sent only to this phone number or email. The phone number must be in the E.164 format. </summary> 
        public string Dest { get; set; }

        ///<summary> Retrieve authentication trials with the specified status. </summary> 
        public AuthenticationTrialItemResource.TrialStatusEnum TrialStatus { get; set; }

        ///<summary> Retrieve authentication trials sent via the specified channel. </summary> 
        public AuthenticationTrialItemResource.ChannelEnum Channel { get; set; }

        ///<summary> Retrieve authentication trials from the configuration whose ID matches the specified one. </summary> 
        public string ConfigurationId { get; set; }

        ///<summary> Retrieve authentication trials from the authentication whose ID matches the specified one. </summary> 
        public string AuthenticationId { get; set; }

        ///<summary> Retrieve authentication trials sent to the specified destination country (in ISO 3166-1 alpha-2). Only possible when `dest` is a phone number. </summary> 
        public string Country { get; set; }

        ///<summary> Retrieve only authentication trials created at the specified date. Must be in ISO 8601 format. </summary> 
        public DateTime? SentAt { get; set; }

        ///<summary> Retrieve only authentication trials created after the specified datetime. Must be in ISO 8601 format. </summary> 
        public DateTime? SentAfter { get; set; }

        ///<summary> Retrieve only authentication trials created before the specified datetime. Must be in ISO 8601 format. </summary> 
        public DateTime? SentBefore { get; set; }




        
        /// <summary> Generate the necessary parameters </summary>
        public  override List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();

            if (Dest != null)
            {
                p.Add(new KeyValuePair<string, string>("dest", Dest));
            }
            if (TrialStatus != null)
            {
                p.Add(new KeyValuePair<string, string>("trialStatus", TrialStatus.ToString()));
            }
            if (Channel != null)
            {
                p.Add(new KeyValuePair<string, string>("channel", Channel.ToString()));
            }
            if (ConfigurationId != null)
            {
                p.Add(new KeyValuePair<string, string>("configurationId", ConfigurationId));
            }
            if (AuthenticationId != null)
            {
                p.Add(new KeyValuePair<string, string>("authenticationId", AuthenticationId));
            }
            if (Country != null)
            {
                p.Add(new KeyValuePair<string, string>("country", Country));
            }
            if (SentAt != null)
            {
                p.Add(new KeyValuePair<string, string>("sentAt", Serializers.DateTimeIso8601(SentAt)));
            }
            if (SentAfter != null)
            {
                p.Add(new KeyValuePair<string, string>("sentAfter", Serializers.DateTimeIso8601(SentAfter)));
            }
            if (SentBefore != null)
            {
                p.Add(new KeyValuePair<string, string>("sentBefore", Serializers.DateTimeIso8601(SentBefore)));
            }
            if (PageSize != null)
            {
                p.Add(new KeyValuePair<string, string>("pageSize", PageSize.ToString()));
            }
            return p;
        }
        

    }

}

